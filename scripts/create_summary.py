#!/usr/bin/env python3
"""
Script to create a comprehensive summary report of the downloaded YouTube videos
"""

import json
import os
import sys
from datetime import datetime
import shutil

def create_summary_report():
    """
    Create a comprehensive summary report of the downloaded videos
    """
    print("Creating summary report...")
    
    # Create reports directory
    reports_dir = os.path.abspath("reports")
    os.makedirs(reports_dir, exist_ok=True)
    
    try:
        # Read metadata files
        with open("metadata/videos_metadata.json", "r") as f:
            videos_metadata = json.load(f)
        
        with open("metadata/shorts_metadata.json", "r") as f:
            shorts_metadata = json.load(f)
        
        with open("downloads/verification_results.json", "r") as f:
            verification_results = json.load(f)
        
        # Copy verification report to reports directory
        shutil.copy("downloads/verification_report.txt", os.path.join(reports_dir, "verification_report.txt"))
        
        # Create main summary report
        with open(os.path.join(reports_dir, "summary_report.md"), "w") as f:
            f.write("# YouTube Video Downloader Summary Report\n\n")
            f.write(f"**Report Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("## Channel Information\n\n")
            f.write("- **Channel Name:** VK-STREAMING\n")
            f.write("- **Channel URL:** https://www.youtube.com/@vk-streaming3526\n")
            f.write("- **Channel ID:** UCOsQ3iGRosvnpP1hAdtplvQ\n\n")
            
            f.write("## Download Summary\n\n")
            f.write(f"- **Total Videos Found:** {len(videos_metadata)}\n")
            f.write(f"- **Total Shorts Found:** {len(shorts_metadata)}\n")
            f.write(f"- **Videos Downloaded:** {sum(1 for v in verification_results if v['verified'])}\n")
            f.write(f"- **Download Success Rate:** {(sum(1 for v in verification_results if v['verified']) / len(videos_metadata)) * 100:.1f}%\n\n")
            
            # Calculate total duration and size
            total_duration = sum(video.get('duration', 0) for video in videos_metadata)
            total_duration_formatted = f"{int(total_duration // 60)}:{int(total_duration % 60):02d}"
            
            total_size_bytes = 0
            for video in verification_results:
                if video['verified'] and 'video_file' in video:
                    video_path = os.path.join("downloads/videos", video['id'], video['video_file'])
                    if os.path.exists(video_path):
                        total_size_bytes += os.path.getsize(video_path)
            
            total_size_mb = total_size_bytes / (1024 * 1024)
            
            f.write(f"- **Total Video Duration:** {total_duration_formatted}\n")
            f.write(f"- **Total Size:** {total_size_mb:.2f} MB\n\n")
            
            f.write("## Downloaded Videos\n\n")
            for i, video in enumerate(videos_metadata, 1):
                f.write(f"### {i}. {video.get('title')}\n\n")
                f.write(f"- **Video ID:** {video.get('id')}\n")
                f.write(f"- **Duration:** {video.get('duration_string')}\n")
                f.write(f"- **URL:** {video.get('webpage_url')}\n")
                f.write(f"- **Views:** {video.get('view_count')}\n")
                f.write(f"- **Description:** {video.get('description')}\n\n")
            
            f.write("## Excluded Shorts\n\n")
            for i, short in enumerate(shorts_metadata, 1):
                f.write(f"### {i}. {short.get('title')}\n\n")
                f.write(f"- **Short ID:** {short.get('id')}\n")
                f.write(f"- **URL:** {short.get('webpage_url')}\n")
                f.write(f"- **Views:** {short.get('view_count')}\n\n")
            
            f.write("## Application Information\n\n")
            f.write("This report was generated by the YouTube Video Downloader application, which downloads videos and their associated metadata from a specified YouTube channel, excluding shorts.\n\n")
            f.write("### Features\n\n")
            f.write("- Extracts video metadata from YouTube channels\n")
            f.write("- Filters out shorts to download only regular videos\n")
            f.write("- Downloads videos in the best available quality\n")
            f.write("- Saves associated metadata including descriptions and thumbnails\n")
            f.write("- Verifies downloaded content for completeness\n")
            f.write("- Generates comprehensive reports\n\n")
            
            f.write("### Directory Structure\n\n")
            f.write("```\n")
            f.write("youtube_downloader/\n")
            f.write("├── metadata/            # Raw and processed metadata\n")
            f.write("│   ├── videos/          # Individual video metadata\n")
            f.write("│   ├── shorts/          # Individual shorts metadata\n")
            f.write("│   ├── summary.txt      # Human-readable summary\n")
            f.write("│   ├── videos_metadata.json  # Processed video metadata\n")
            f.write("│   └── shorts_metadata.json  # Processed shorts metadata\n")
            f.write("├── downloads/           # Downloaded videos and verification\n")
            f.write("│   ├── videos/          # Individual video directories\n")
            f.write("│   │   ├── [video_id]/  # Directory for each video\n")
            f.write("│   │   │   ├── video.mp4       # The video file\n")
            f.write("│   │   │   ├── metadata.json   # Original metadata\n")
            f.write("│   │   │   ├── *.info.json     # yt-dlp info\n")
            f.write("│   │   │   ├── *.description   # Video description\n")
            f.write("│   │   │   └── *.webp          # Video thumbnail\n")
            f.write("│   └── verification_report.txt # Verification details\n")
            f.write("├── reports/             # Generated reports\n")
            f.write("│   ├── summary_report.md       # This report\n")
            f.write("│   └── verification_report.txt # Verification details\n")
            f.write("└── scripts/             # Application scripts\n")
            f.write("    ├── channel_info.py         # Channel access\n")
            f.write("    ├── extract_metadata.py     # Metadata extraction\n")
            f.write("    ├── download_videos.py      # Video downloading\n")
            f.write("    ├── verify_downloads.py     # Download verification\n")
            f.write("    └── create_summary.py       # Report generation\n")
            f.write("```\n")
        
        # Create a text version of the summary report
        with open(os.path.join(reports_dir, "summary_report.txt"), "w") as f:
            f.write("YouTube Video Downloader Summary Report\n")
            f.write("=======================================\n\n")
            f.write(f"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            f.write("Channel Information\n")
            f.write("-------------------\n\n")
            f.write("Channel Name: VK-STREAMING\n")
            f.write("Channel URL: https://www.youtube.com/@vk-streaming3526\n")
            f.write("Channel ID: UCOsQ3iGRosvnpP1hAdtplvQ\n\n")
            
            f.write("Download Summary\n")
            f.write("----------------\n\n")
            f.write(f"Total Videos Found: {len(videos_metadata)}\n")
            f.write(f"Total Shorts Found: {len(shorts_metadata)}\n")
            f.write(f"Videos Downloaded: {sum(1 for v in verification_results if v['verified'])}\n")
            f.write(f"Download Success Rate: {(sum(1 for v in verification_results if v['verified']) / len(videos_metadata)) * 100:.1f}%\n")
            f.write(f"Total Video Duration: {total_duration_formatted}\n")
            f.write(f"Total Size: {total_size_mb:.2f} MB\n\n")
            
            f.write("Downloaded Videos\n")
            f.write("-----------------\n\n")
            for i, video in enumerate(videos_metadata, 1):
                f.write(f"{i}. {video.get('title')}\n")
                f.write(f"   Video ID: {video.get('id')}\n")
                f.write(f"   Duration: {video.get('duration_string')}\n")
                f.write(f"   URL: {video.get('webpage_url')}\n")
                f.write(f"   Views: {video.get('view_count')}\n")
                f.write(f"   Description: {video.get('description')}\n\n")
        
        # Create a README file for the project
        with open(os.path.join(reports_dir, "README.md"), "w") as f:
            f.write("# YouTube Video Downloader\n\n")
            f.write("This application downloads videos and their associated metadata from a specified YouTube channel, excluding shorts.\n\n")
            
            f.write("## Usage\n\n")
            f.write("1. Install dependencies:\n")
            f.write("   ```\n")
            f.write("   pip install yt-dlp requests beautifulsoup4 python-dateutil\n")
            f.write("   ```\n\n")
            
            f.write("2. Run the main script:\n")
            f.write("   ```\n")
            f.write("   python main.py [channel_url]\n")
            f.write("   ```\n\n")
            
            f.write("   Example:\n")
            f.write("   ```\n")
            f.write("   python main.py https://www.youtube.com/@vk-streaming3526\n")
            f.write("   ```\n\n")
            
            f.write("## Features\n\n")
            f.write("- Extracts video metadata from YouTube channels\n")
            f.write("- Filters out shorts to download only regular videos\n")
            f.write("- Downloads videos in the best available quality\n")
            f.write("- Saves associated metadata including descriptions and thumbnails\n")
            f.write("- Verifies downloaded content for completeness\n")
            f.write("- Generates comprehensive reports\n\n")
            
            f.write("## Requirements\n\n")
            f.write("- Python 3.6+\n")
            f.write("- yt-dlp\n")
            f.write("- requests\n")
            f.write("- beautifulsoup4\n")
            f.write("- python-dateutil\n\n")
            
            f.write("## Output\n\n")
            f.write("The application creates the following directory structure:\n\n")
            f.write("```\n")
            f.write("youtube_downloader/\n")
            f.write("├── metadata/            # Raw and processed metadata\n")
            f.write("├── downloads/           # Downloaded videos and verification\n")
            f.write("└── reports/             # Generated reports\n")
            f.write("```\n\n")
            
            f.write("For more details, see the summary report in the reports directory.\n")
        
        print(f"Summary report created at {os.path.join(reports_dir, 'summary_report.md')}")
        print(f"Text report created at {os.path.join(reports_dir, 'summary_report.txt')}")
        print(f"README created at {os.path.join(reports_dir, 'README.md')}")
        
        return True
    except Exception as e:
        print(f"Error creating summary report: {e}")
        return False

if __name__ == "__main__":
    print(f"Starting summary report creation at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    success = create_summary_report()
    if success:
        print("Successfully created summary report")
    else:
        print("Failed to create summary report")
        sys.exit(1)
